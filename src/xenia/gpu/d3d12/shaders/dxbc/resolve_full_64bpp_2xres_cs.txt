//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint xe_resolve_edram_info;        // Offset:    0 Size:     4
//   uint xe_resolve_address_info;      // Offset:    4 Size:     4
//   uint xe_resolve_dest_info;         // Offset:    8 Size:     4
//   uint xe_resolve_dest_pitch;        // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_source                 texture   uint4         buf      T0             t0      1 
// xe_resolve_dest                       UAV   uint4         buf      U0             u0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][1], immediateIndexed, space=0
dcl_resource_buffer (uint,uint,uint,uint) T0[0:0], space=0
dcl_uav_typed_buffer (uint,uint,uint,uint) U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 21
dcl_thread_group 8, 8, 1
ushr r0.xy, CB0[0][0].yyyy, l(5, 29, 0, 0)
mov r0.z, CB0[0][0].y
bfi r1.xy, l(5, 2, 0, 0), l(3, 3, 0, 0), r0.zxzz, l(0, 0, 0, 0)
iadd r1.xy, r1.xyxx, vThreadID.xyxx
and r2.xyzw, CB0[0][0].zxzx, l(7, 1023, 0x01000000, 0x40000000)
ubfe r3.xyzw, l(12, 2, 1, 4), l(13, 10, 29, 25), CB0[0][0].xxxx
uge r0.w, l(3), r0.y
if_nz r0.w
  mov r4.y, r0.y
else 
  ieq r0.w, r0.y, l(5)
  if_nz r0.w
    mov r4.y, l(2)
  else 
    mov r4.y, l(0)
  endif 
endif 
uge r1.zw, r3.yyyy, l(0, 0, 2, 1)
and r1.zw, r1.zzzw, l(0, 0, 1, 1)
ishl r1.xy, r1.xyxx, r1.zwzz
ushr r4.x, r4.y, l(1)
and r1.zw, r4.xxxy, l(0, 0, 1, 1)
iadd r1.xy, r1.zwzz, r1.xyxx
udiv r0.w, null, r1.x, l(80)
ushr r1.z, r1.y, l(4)
movc r1.w, r3.z, l(1), l(0)
ishl r3.y, r0.w, r1.w
imad r2.y, r1.z, r2.y, r3.y
iadd r2.y, r2.y, r3.x
ineg r3.x, r0.w
ineg r3.y, r1.z
imad r1.xy, r3.xyxx, l(80, 16, 0, 0), r1.xyxx
imad r0.w, r1.y, l(80), r1.x
ishl r0.w, r0.w, r1.w
imad r0.w, r2.y, l(1280), r0.w
ld r1.xyzw, r0.wwww, T0[0].xzyw
if_nz r3.z
  iadd r2.y, r0.w, l(1)
  ld r4.xyzw, r2.yyyy, T0[0].xzyw
  switch r3.w
    case l(5)
    ishl r8.xyzw, r1.xzyw, l(16, 16, 16, 16)
    mov r9.xz, r8.xxyx
    mov r9.yw, r1.xxxz
    ishr r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    mov r1.xz, r8.zzwz
    ishr r8.xyzw, r1.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r8.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    ishl r8.xyzw, r4.xzyw, l(16, 16, 16, 16)
    mov r9.xz, r8.xxyx
    mov r9.yw, r4.xxxz
    ishr r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    mov r4.xz, r8.zzwz
    ishr r8.xyzw, r4.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r1.xyzw, r8.ywzx, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r8.xyzw, r1.xzyw, l(16, 16, 16, 16)
    f16tof32 r5.xz, r1.xxzx
    f16tof32 r5.yw, r8.xxxy
    f16tof32 r6.xz, r1.yywy
    f16tof32 r6.yw, r8.zzzw
    ushr r8.xyzw, r4.xzyw, l(16, 16, 16, 16)
    f16tof32 r7.xz, r4.xxzx
    f16tof32 r7.yw, r8.xxxy
    f16tof32 r1.zw, r4.wwwy
    f16tof32 r1.xy, r8.zwzz
    break 
    default 
    mov r5.xy, r1.xzxx
    mov r5.zw, l(0,0,0,0)
    mov r6.xy, r1.ywyy
    mov r6.zw, l(0,0,0,0)
    mov r7.xy, r4.xzxx
    mov r7.zw, l(0,0,0,0)
    mov r1.xw, r4.wwwy
    mov r1.yz, l(0,0,0,0)
    break 
  endswitch 
else 
  switch r3.w
    case l(0)
    case l(1)
    ushr r4.yzw, r1.xxxx, l(0, 8, 16, 24)
    mov r4.x, r1.x
    and r4.xyzw, r4.xyzw, l(255, 255, 255, 255)
    utof r4.xyzw, r4.xyzw
    mul r5.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    ushr r4.yzw, r1.zzzz, l(0, 8, 16, 24)
    mov r4.x, r1.z
    and r4.xyzw, r4.xyzw, l(255, 255, 255, 255)
    utof r4.xyzw, r4.xyzw
    mul r6.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    ushr r4.yzw, r1.yyyy, l(0, 8, 16, 24)
    mov r4.x, r1.y
    and r4.xyzw, r4.xyzw, l(255, 255, 255, 255)
    utof r4.xyzw, r4.xyzw
    mul r7.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    ushr r1.xyz, r1.wwww, l(8, 24, 16, 0)
    and r4.xyzw, r1.wxzy, l(255, 255, 255, 255)
    utof r4.xyzw, r4.xyzw
    mul r1.xyzw, r4.ywzx, l(0.003922, 0.003922, 0.003922, 0.003922)
    break 
    case l(2)
    case l(10)
    ushr r4.yzw, r1.xxxx, l(0, 10, 20, 30)
    mov r4.x, r1.x
    and r4.xyzw, r4.xyzw, l(1023, 1023, 1023, 3)
    utof r4.xyzw, r4.xyzw
    mul r5.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
    ushr r4.yzw, r1.zzzz, l(0, 10, 20, 30)
    mov r4.x, r1.z
    and r4.xyzw, r4.xyzw, l(1023, 1023, 1023, 3)
    utof r4.xyzw, r4.xyzw
    mul r6.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
    ushr r4.yzw, r1.yyyy, l(0, 10, 20, 30)
    mov r4.x, r1.y
    and r4.xyzw, r4.xyzw, l(1023, 1023, 1023, 3)
    utof r4.xyzw, r4.xyzw
    mul r7.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
    ushr r1.xyz, r1.wwww, l(10, 30, 20, 0)
    and r4.xyzw, r1.wxzy, l(1023, 1023, 1023, 3)
    utof r4.xyzw, r4.xyzw
    mul r1.xyzw, r4.ywzx, l(0.000978, 0.333333, 0.000978, 0.000978)
    break 
    case l(3)
    case l(12)
    ushr r4.xyzw, r1.xxxz, l(10, 20, 30, 30)
    mov r8.x, r1.x
    mov r8.yz, r4.xxyx
    and r9.xyz, r8.xyzx, l(1023, 1023, 1023, 0)
    and r10.xyz, r8.xyzx, l(127, 127, 127, 0)
    ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r8.xyzx
    firstbit_hi r12.xyz, r10.xyzx
    iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
    movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
    iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
    movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
    bfi r8.xyz, l(7, 7, 7, 0), r12.xyzx, r8.xyzx, l(0, 0, 0, 0)
    and r8.xyz, r8.xyzx, l(127, 127, 127, 0)
    movc r8.xyz, r11.xyzx, r10.xyzx, r8.xyzx
    ishl r10.xyz, r13.xyzx, l(23, 23, 23, 0)
    iadd r10.xyz, r10.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r8.xyz, r8.xyzx, l(16, 16, 16, 0)
    iadd r8.xyz, r10.xyzx, r8.xyzx
    movc r5.xyz, r9.xyzx, r8.xyzx, l(0,0,0,0)
    utof r3.xy, r4.zwzz
    ushr r4.xyzw, r1.zyyz, l(10, 10, 20, 20)
    mov r8.x, r1.z
    mov r8.yz, r4.xxwx
    and r9.xyz, r8.xyzx, l(1023, 1023, 1023, 0)
    and r10.xyz, r8.xyzx, l(127, 127, 127, 0)
    ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r8.xyzx
    firstbit_hi r12.xyz, r10.xyzx
    iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
    movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
    iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
    movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
    bfi r8.xyz, l(7, 7, 7, 0), r12.xyzx, r8.xyzx, l(0, 0, 0, 0)
    and r8.xyz, r8.xyzx, l(127, 127, 127, 0)
    movc r8.xyz, r11.xyzx, r10.xyzx, r8.xyzx
    ishl r10.xyz, r13.xyzx, l(23, 23, 23, 0)
    iadd r10.xyz, r10.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r8.xyz, r8.xyzx, l(16, 16, 16, 0)
    iadd r8.xyz, r10.xyzx, r8.xyzx
    movc r6.xyz, r9.xyzx, r8.xyzx, l(0,0,0,0)
    mul r3.xy, r3.xyxx, l(0.333333, 0.333333, 0.000000, 0.000000)
    mov r4.x, r1.y
    and r8.xyz, r4.xyzx, l(1023, 1023, 1023, 0)
    and r9.xyz, r4.xyzx, l(127, 127, 127, 0)
    ubfe r10.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r4.xyzx
    firstbit_hi r11.xyz, r9.xyzx
    iadd r11.xyz, r11.xyzx, l(-24, -24, -24, 0)
    movc r11.xyz, r9.xyzx, r11.xyzx, l(8,8,8,0)
    iadd r12.xyz, -r11.xyzx, l(1, 1, 1, 0)
    movc r12.xyz, r10.xyzx, r10.xyzx, r12.xyzx
    bfi r4.xyz, l(7, 7, 7, 0), r11.xyzx, r4.xyzx, l(0, 0, 0, 0)
    and r4.xyz, r4.xyzx, l(127, 127, 127, 0)
    movc r4.xyz, r10.xyzx, r9.xyzx, r4.xyzx
    ishl r9.xyz, r12.xyzx, l(23, 23, 23, 0)
    iadd r9.xyz, r9.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r4.xyz, r4.xyzx, l(16, 16, 16, 0)
    iadd r4.xyz, r9.xyzx, r4.xyzx
    movc r7.xyz, r8.xyzx, r4.xyzx, l(0,0,0,0)
    ushr r4.xyzw, r1.ywww, l(30, 10, 20, 30)
    utof r8.xy, r4.xwxx
    mov r4.x, r1.w
    and r9.xyz, r4.xyzx, l(1023, 1023, 1023, 0)
    and r10.xyz, r4.xyzx, l(127, 127, 127, 0)
    ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r4.xyzx
    firstbit_hi r12.xyz, r10.xyzx
    iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
    movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
    iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
    movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
    bfi r4.xyz, l(7, 7, 7, 0), r12.xyzx, r4.xyzx, l(0, 0, 0, 0)
    and r4.xyz, r4.xyzx, l(127, 127, 127, 0)
    movc r4.xyz, r11.xyzx, r10.xyzx, r4.xyzx
    ishl r10.xyz, r13.xyzx, l(23, 23, 23, 0)
    iadd r10.xyz, r10.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r4.xyz, r4.xyzx, l(16, 16, 16, 0)
    iadd r4.xyz, r10.xyzx, r4.xyzx
    movc r1.xzw, r9.yyzx, r4.yyzx, l(0,0,0,0)
    mul r4.xy, r8.xyxx, l(0.333333, 0.333333, 0.000000, 0.000000)
    mov r5.w, r3.x
    mov r6.w, r3.y
    mov r7.w, r4.x
    mov r1.y, r4.y
    break 
    case l(4)
    ishl r4.xyzw, r1.xzyw, l(16, 16, 16, 16)
    mov r8.xz, r4.xxyx
    mov r8.yw, r1.xxxz
    ishr r8.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xy, r8.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    max r6.xy, r8.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
    mov r1.xz, r4.zzwz
    ishr r4.xyzw, r1.xyzw, l(16, 16, 16, 16)
    itof r4.xyzw, r4.xyzw
    mul r4.xyzw, r4.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    max r1.xw, r4.wwwz, l(-1.000000, 0.000000, 0.000000, -1.000000)
    mov r5.zw, l(0,0,0,0)
    mov r6.zw, l(0,0,0,0)
    mov r7.zw, l(0,0,0,0)
    mov r1.yz, l(0,0,0,0)
    break 
    case l(6)
    ushr r4.xyzw, r1.xzyw, l(16, 16, 16, 16)
    f16tof32 r5.x, r1.x
    f16tof32 r5.y, r4.x
    f16tof32 r6.x, r1.z
    f16tof32 r6.y, r4.y
    f16tof32 r7.x, r1.y
    f16tof32 r7.y, r4.z
    f16tof32 r1.w, r1.w
    f16tof32 r1.x, r4.w
    mov r5.zw, l(0,0,0,0)
    mov r6.zw, l(0,0,0,0)
    mov r7.zw, l(0,0,0,0)
    mov r1.yz, l(0,0,0,0)
    break 
    default 
    mov r5.x, r1.x
    mov r5.yzw, l(0,0,0,0)
    mov r6.x, r1.z
    mov r6.yzw, l(0,0,0,0)
    mov r7.x, r1.y
    mov r7.yzw, l(0,0,0,0)
    mov r1.xyz, l(0,0,0,0)
    break 
  endswitch 
endif 
ibfe r2.y, l(6), l(16), CB0[0][0].z
ishl r2.y, r2.y, l(23)
iadd r2.y, r2.y, l(0x3f800000)
uge r3.x, r0.y, l(4)
if_nz r3.x
  mul r3.x, r2.y, l(0.500000)
  ishl r3.y, l(80), r3.z
  iadd r3.y, r0.w, r3.y
  ld r4.xyzw, r3.yyyy, T0[0].xzyw
  if_nz r3.z
    iadd r3.y, r0.w, l(161)
    ld r8.xyzw, r3.yyyy, T0[0].xzyw
    switch r3.w
      case l(5)
      ishl r12.xyzw, r4.xzyw, l(16, 16, 16, 16)
      mov r13.xz, r12.xxyx
      mov r13.yw, r4.xxxz
      ishr r13.xyzw, r13.xyzw, l(16, 16, 16, 16)
      itof r13.xyzw, r13.xyzw
      mul r13.xyzw, r13.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r13.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      mov r4.xz, r12.zzwz
      ishr r12.xyzw, r4.xyzw, l(16, 16, 16, 16)
      itof r12.xyzw, r12.xyzw
      mul r12.xyzw, r12.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r10.xyzw, r12.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      ishl r12.xyzw, r8.xzyw, l(16, 16, 16, 16)
      mov r13.xz, r12.xxyx
      mov r13.yw, r8.xxxz
      ishr r13.xyzw, r13.xyzw, l(16, 16, 16, 16)
      itof r13.xyzw, r13.xyzw
      mul r13.xyzw, r13.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r11.xyzw, r13.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      mov r8.xz, r12.zzwz
      ishr r12.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r12.xyzw, r12.xyzw
      mul r12.xyzw, r12.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r4.xyzw, r12.ywzx, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r12.xyzw, r4.xzyw, l(16, 16, 16, 16)
      f16tof32 r9.xz, r4.xxzx
      f16tof32 r9.yw, r12.xxxy
      f16tof32 r10.xz, r4.yywy
      f16tof32 r10.yw, r12.zzzw
      ushr r12.xyzw, r8.xzyw, l(16, 16, 16, 16)
      f16tof32 r11.xz, r8.xxzx
      f16tof32 r11.yw, r12.xxxy
      f16tof32 r4.zw, r8.wwwy
      f16tof32 r4.xy, r12.zwzz
      break 
      default 
      mov r9.xy, r4.xzxx
      mov r9.zw, l(0,0,0,0)
      mov r10.xy, r4.ywyy
      mov r10.zw, l(0,0,0,0)
      mov r11.xy, r8.xzxx
      mov r11.zw, l(0,0,0,0)
      mov r4.xw, r8.wwwy
      mov r4.yz, l(0,0,0,0)
      break 
    endswitch 
  else 
    switch r3.w
      case l(0)
      case l(1)
      ushr r8.yzw, r4.xxxx, l(0, 8, 16, 24)
      mov r8.x, r4.x
      and r8.xyzw, r8.xyzw, l(255, 255, 255, 255)
      utof r8.xyzw, r8.xyzw
      mul r9.xyzw, r8.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      ushr r8.yzw, r4.zzzz, l(0, 8, 16, 24)
      mov r8.x, r4.z
      and r8.xyzw, r8.xyzw, l(255, 255, 255, 255)
      utof r8.xyzw, r8.xyzw
      mul r10.xyzw, r8.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      ushr r8.yzw, r4.yyyy, l(0, 8, 16, 24)
      mov r8.x, r4.y
      and r8.xyzw, r8.xyzw, l(255, 255, 255, 255)
      utof r8.xyzw, r8.xyzw
      mul r11.xyzw, r8.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      ushr r4.xyz, r4.wwww, l(8, 24, 16, 0)
      and r8.xyzw, r4.wxzy, l(255, 255, 255, 255)
      utof r8.xyzw, r8.xyzw
      mul r4.xyzw, r8.ywzx, l(0.003922, 0.003922, 0.003922, 0.003922)
      break 
      case l(2)
      case l(10)
      ushr r8.yzw, r4.xxxx, l(0, 10, 20, 30)
      mov r8.x, r4.x
      and r8.xyzw, r8.xyzw, l(1023, 1023, 1023, 3)
      utof r8.xyzw, r8.xyzw
      mul r9.xyzw, r8.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
      ushr r8.yzw, r4.zzzz, l(0, 10, 20, 30)
      mov r8.x, r4.z
      and r8.xyzw, r8.xyzw, l(1023, 1023, 1023, 3)
      utof r8.xyzw, r8.xyzw
      mul r10.xyzw, r8.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
      ushr r8.yzw, r4.yyyy, l(0, 10, 20, 30)
      mov r8.x, r4.y
      and r8.xyzw, r8.xyzw, l(1023, 1023, 1023, 3)
      utof r8.xyzw, r8.xyzw
      mul r11.xyzw, r8.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
      ushr r4.xyz, r4.wwww, l(10, 30, 20, 0)
      and r8.xyzw, r4.wxzy, l(1023, 1023, 1023, 3)
      utof r8.xyzw, r8.xyzw
      mul r4.xyzw, r8.ywzx, l(0.000978, 0.333333, 0.000978, 0.000978)
      break 
      case l(3)
      case l(12)
      ushr r8.xyzw, r4.xxxz, l(10, 20, 30, 30)
      mov r12.x, r4.x
      mov r12.yz, r8.xxyx
      and r13.xyz, r12.xyzx, l(1023, 1023, 1023, 0)
      and r14.xyz, r12.xyzx, l(127, 127, 127, 0)
      ubfe r15.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r12.xyzx
      firstbit_hi r16.xyz, r14.xyzx
      iadd r16.xyz, r16.xyzx, l(-24, -24, -24, 0)
      movc r16.xyz, r14.xyzx, r16.xyzx, l(8,8,8,0)
      iadd r17.xyz, -r16.xyzx, l(1, 1, 1, 0)
      movc r17.xyz, r15.xyzx, r15.xyzx, r17.xyzx
      bfi r12.xyz, l(7, 7, 7, 0), r16.xyzx, r12.xyzx, l(0, 0, 0, 0)
      and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
      movc r12.xyz, r15.xyzx, r14.xyzx, r12.xyzx
      ishl r14.xyz, r17.xyzx, l(23, 23, 23, 0)
      iadd r14.xyz, r14.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r12.xyz, r12.xyzx, l(16, 16, 16, 0)
      iadd r12.xyz, r14.xyzx, r12.xyzx
      movc r9.xyz, r13.xyzx, r12.xyzx, l(0,0,0,0)
      utof r8.xy, r8.zwzz
      ushr r12.xyzw, r4.zyyz, l(10, 10, 20, 20)
      mov r13.x, r4.z
      mov r13.yz, r12.xxwx
      and r14.xyz, r13.xyzx, l(1023, 1023, 1023, 0)
      and r15.xyz, r13.xyzx, l(127, 127, 127, 0)
      ubfe r16.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r13.xyzx
      firstbit_hi r17.xyz, r15.xyzx
      iadd r17.xyz, r17.xyzx, l(-24, -24, -24, 0)
      movc r17.xyz, r15.xyzx, r17.xyzx, l(8,8,8,0)
      iadd r18.xyz, -r17.xyzx, l(1, 1, 1, 0)
      movc r18.xyz, r16.xyzx, r16.xyzx, r18.xyzx
      bfi r13.xyz, l(7, 7, 7, 0), r17.xyzx, r13.xyzx, l(0, 0, 0, 0)
      and r13.xyz, r13.xyzx, l(127, 127, 127, 0)
      movc r13.xyz, r16.xyzx, r15.xyzx, r13.xyzx
      ishl r15.xyz, r18.xyzx, l(23, 23, 23, 0)
      iadd r15.xyz, r15.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r13.xyz, r13.xyzx, l(16, 16, 16, 0)
      iadd r13.xyz, r15.xyzx, r13.xyzx
      movc r10.xyz, r14.xyzx, r13.xyzx, l(0,0,0,0)
      mov r12.x, r4.y
      and r13.xyz, r12.xyzx, l(1023, 1023, 1023, 0)
      and r14.xyz, r12.xyzx, l(127, 127, 127, 0)
      ubfe r15.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r12.xyzx
      firstbit_hi r16.xyz, r14.xyzx
      iadd r16.xyz, r16.xyzx, l(-24, -24, -24, 0)
      movc r16.xyz, r14.xyzx, r16.xyzx, l(8,8,8,0)
      iadd r17.xyz, -r16.xyzx, l(1, 1, 1, 0)
      movc r17.xyz, r15.xyzx, r15.xyzx, r17.xyzx
      bfi r12.xyz, l(7, 7, 7, 0), r16.xyzx, r12.xyzx, l(0, 0, 0, 0)
      and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
      movc r12.xyz, r15.xyzx, r14.xyzx, r12.xyzx
      ishl r14.xyz, r17.xyzx, l(23, 23, 23, 0)
      iadd r14.xyz, r14.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r12.xyz, r12.xyzx, l(16, 16, 16, 0)
      iadd r12.xyz, r14.xyzx, r12.xyzx
      movc r11.xyz, r13.xyzx, r12.xyzx, l(0,0,0,0)
      ushr r12.xyzw, r4.ywww, l(30, 10, 20, 30)
      utof r8.zw, r12.xxxw
      mov r12.x, r4.w
      and r13.xyz, r12.xyzx, l(1023, 1023, 1023, 0)
      and r14.xyz, r12.xyzx, l(127, 127, 127, 0)
      ubfe r15.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r12.xyzx
      firstbit_hi r16.xyz, r14.xyzx
      iadd r16.xyz, r16.xyzx, l(-24, -24, -24, 0)
      movc r16.xyz, r14.xyzx, r16.xyzx, l(8,8,8,0)
      iadd r17.xyz, -r16.xyzx, l(1, 1, 1, 0)
      movc r17.xyz, r15.xyzx, r15.xyzx, r17.xyzx
      bfi r12.xyz, l(7, 7, 7, 0), r16.xyzx, r12.xyzx, l(0, 0, 0, 0)
      and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
      movc r12.xyz, r15.xyzx, r14.xyzx, r12.xyzx
      ishl r14.xyz, r17.xyzx, l(23, 23, 23, 0)
      iadd r14.xyz, r14.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r12.xyz, r12.xyzx, l(16, 16, 16, 0)
      iadd r12.xyz, r14.xyzx, r12.xyzx
      movc r4.xzw, r13.yyzx, r12.yyzx, l(0,0,0,0)
      mul r8.xyzw, r8.xyzw, l(0.333333, 0.333333, 0.333333, 0.333333)
      mov r9.w, r8.x
      mov r10.w, r8.y
      mov r11.w, r8.z
      mov r4.y, r8.w
      break 
      case l(4)
      ishl r8.xyzw, r4.xzyw, l(16, 16, 16, 16)
      mov r12.xz, r8.xxyx
      mov r12.yw, r4.xxxz
      ishr r12.xyzw, r12.xyzw, l(16, 16, 16, 16)
      itof r12.xyzw, r12.xyzw
      mul r12.xyzw, r12.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
      max r10.xy, r12.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
      mov r4.xz, r8.zzwz
      ishr r8.xyzw, r4.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r11.xy, r8.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
      max r4.xw, r8.wwwz, l(-1.000000, 0.000000, 0.000000, -1.000000)
      mov r9.zw, l(0,0,0,0)
      mov r10.zw, l(0,0,0,0)
      mov r11.zw, l(0,0,0,0)
      mov r4.yz, l(0,0,0,0)
      break 
      case l(6)
      ushr r8.xyzw, r4.xzyw, l(16, 16, 16, 16)
      f16tof32 r9.x, r4.x
      f16tof32 r9.y, r8.x
      f16tof32 r10.x, r4.z
      f16tof32 r10.y, r8.y
      f16tof32 r11.x, r4.y
      f16tof32 r11.y, r8.z
      f16tof32 r4.w, r4.w
      f16tof32 r4.x, r8.w
      mov r9.zw, l(0,0,0,0)
      mov r10.zw, l(0,0,0,0)
      mov r11.zw, l(0,0,0,0)
      mov r4.yz, l(0,0,0,0)
      break 
      default 
      mov r9.x, r4.x
      mov r9.yzw, l(0,0,0,0)
      mov r10.x, r4.z
      mov r10.yzw, l(0,0,0,0)
      mov r11.x, r4.y
      mov r11.yzw, l(0,0,0,0)
      mov r4.xyz, l(0,0,0,0)
      break 
    endswitch 
  endif 
  add r5.xyzw, r5.xyzw, r9.xyzw
  add r6.xyzw, r6.xyzw, r10.xyzw
  add r7.xyzw, r7.xyzw, r11.xyzw
  add r1.xyzw, r1.xyzw, r4.xyzw
  uge r0.y, r0.y, l(6)
  if_nz r0.y
    mul r2.y, r2.y, l(0.250000)
    ishl r4.xy, l(1, 81, 0, 0), r3.zzzz
    iadd r4.xy, r0.wwww, r4.xyxx
    ld r8.xyzw, r4.xxxx, T0[0].xzyw
    if_nz r3.z
      iadd r0.y, r0.w, l(3)
      ld r9.xyzw, r0.yyyy, T0[0].xzyw
      switch r3.w
        case l(5)
        ishl r13.xyzw, r8.xzyw, l(16, 16, 16, 16)
        mov r14.xz, r13.xxyx
        mov r14.yw, r8.xxxz
        ishr r14.xyzw, r14.xyzw, l(16, 16, 16, 16)
        itof r14.xyzw, r14.xyzw
        mul r14.xyzw, r14.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r10.xyzw, r14.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        mov r8.xz, r13.zzwz
        ishr r13.xyzw, r8.xyzw, l(16, 16, 16, 16)
        itof r13.xyzw, r13.xyzw
        mul r13.xyzw, r13.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r11.xyzw, r13.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ishl r13.xyzw, r9.xzyw, l(16, 16, 16, 16)
        mov r14.xz, r13.xxyx
        mov r14.yw, r9.xxxz
        ishr r14.xyzw, r14.xyzw, l(16, 16, 16, 16)
        itof r14.xyzw, r14.xyzw
        mul r14.xyzw, r14.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r12.xyzw, r14.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        mov r9.xz, r13.zzwz
        ishr r13.xyzw, r9.xyzw, l(16, 16, 16, 16)
        itof r13.xyzw, r13.xyzw
        mul r13.xyzw, r13.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r8.xyzw, r13.ywzx, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        ushr r13.xyzw, r8.xzyw, l(16, 16, 16, 16)
        f16tof32 r10.xz, r8.xxzx
        f16tof32 r10.yw, r13.xxxy
        f16tof32 r11.xz, r8.yywy
        f16tof32 r11.yw, r13.zzzw
        ushr r13.xyzw, r9.xzyw, l(16, 16, 16, 16)
        f16tof32 r12.xz, r9.xxzx
        f16tof32 r12.yw, r13.xxxy
        f16tof32 r8.zw, r9.wwwy
        f16tof32 r8.xy, r13.zwzz
        break 
        default 
        mov r10.xy, r8.xzxx
        mov r10.zw, l(0,0,0,0)
        mov r11.xy, r8.ywyy
        mov r11.zw, l(0,0,0,0)
        mov r12.xy, r9.xzxx
        mov r12.zw, l(0,0,0,0)
        mov r8.xw, r9.wwwy
        mov r8.yz, l(0,0,0,0)
        break 
      endswitch 
    else 
      switch r3.w
        case l(0)
        case l(1)
        ushr r9.yzw, r8.xxxx, l(0, 8, 16, 24)
        mov r9.x, r8.x
        and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r10.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r9.yzw, r8.zzzz, l(0, 8, 16, 24)
        mov r9.x, r8.z
        and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r11.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r9.yzw, r8.yyyy, l(0, 8, 16, 24)
        mov r9.x, r8.y
        and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r12.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r8.xyz, r8.wwww, l(8, 24, 16, 0)
        and r9.xyzw, r8.wxzy, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.ywzx, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        ushr r9.yzw, r8.xxxx, l(0, 10, 20, 30)
        mov r9.x, r8.x
        and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r10.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r9.yzw, r8.zzzz, l(0, 10, 20, 30)
        mov r9.x, r8.z
        and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r11.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r9.yzw, r8.yyyy, l(0, 10, 20, 30)
        mov r9.x, r8.y
        and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r12.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r8.xyz, r8.wwww, l(10, 30, 20, 0)
        and r9.xyzw, r8.wxzy, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.ywzx, l(0.000978, 0.333333, 0.000978, 0.000978)
        break 
        case l(3)
        case l(12)
        ushr r9.xyzw, r8.xxxz, l(10, 20, 30, 30)
        mov r13.x, r8.x
        mov r13.yz, r9.xxyx
        and r4.xzw, r13.xxyz, l(1023, 0, 1023, 1023)
        and r14.xyz, r13.xyzx, l(127, 127, 127, 0)
        ubfe r15.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r13.xyzx
        firstbit_hi r16.xyz, r14.xyzx
        iadd r16.xyz, r16.xyzx, l(-24, -24, -24, 0)
        movc r16.xyz, r14.xyzx, r16.xyzx, l(8,8,8,0)
        iadd r17.xyz, -r16.xyzx, l(1, 1, 1, 0)
        movc r17.xyz, r15.xyzx, r15.xyzx, r17.xyzx
        bfi r13.xyz, l(7, 7, 7, 0), r16.xyzx, r13.xyzx, l(0, 0, 0, 0)
        and r13.xyz, r13.xyzx, l(127, 127, 127, 0)
        movc r13.xyz, r15.xyzx, r14.xyzx, r13.xyzx
        ishl r14.xyz, r17.xyzx, l(23, 23, 23, 0)
        iadd r14.xyz, r14.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r13.xyz, r13.xyzx, l(16, 16, 16, 0)
        iadd r13.xyz, r14.xyzx, r13.xyzx
        movc r10.xyz, r4.xzwx, r13.xyzx, l(0,0,0,0)
        utof r4.xz, r9.zzwz
        ushr r9.xyzw, r8.zyyz, l(10, 10, 20, 20)
        mov r13.x, r8.z
        mov r13.yz, r9.xxwx
        and r14.xyz, r13.xyzx, l(1023, 1023, 1023, 0)
        and r15.xyz, r13.xyzx, l(127, 127, 127, 0)
        ubfe r16.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r13.xyzx
        firstbit_hi r17.xyz, r15.xyzx
        iadd r17.xyz, r17.xyzx, l(-24, -24, -24, 0)
        movc r17.xyz, r15.xyzx, r17.xyzx, l(8,8,8,0)
        iadd r18.xyz, -r17.xyzx, l(1, 1, 1, 0)
        movc r18.xyz, r16.xyzx, r16.xyzx, r18.xyzx
        bfi r13.xyz, l(7, 7, 7, 0), r17.xyzx, r13.xyzx, l(0, 0, 0, 0)
        and r13.xyz, r13.xyzx, l(127, 127, 127, 0)
        movc r13.xyz, r16.xyzx, r15.xyzx, r13.xyzx
        ishl r15.xyz, r18.xyzx, l(23, 23, 23, 0)
        iadd r15.xyz, r15.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r13.xyz, r13.xyzx, l(16, 16, 16, 0)
        iadd r13.xyz, r15.xyzx, r13.xyzx
        movc r11.xyz, r14.xyzx, r13.xyzx, l(0,0,0,0)
        mul r4.xz, r4.xxzx, l(0.333333, 0.000000, 0.333333, 0.000000)
        mov r9.x, r8.y
        and r13.xyz, r9.xyzx, l(1023, 1023, 1023, 0)
        and r14.xyz, r9.xyzx, l(127, 127, 127, 0)
        ubfe r15.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r9.xyzx
        firstbit_hi r16.xyz, r14.xyzx
        iadd r16.xyz, r16.xyzx, l(-24, -24, -24, 0)
        movc r16.xyz, r14.xyzx, r16.xyzx, l(8,8,8,0)
        iadd r17.xyz, -r16.xyzx, l(1, 1, 1, 0)
        movc r17.xyz, r15.xyzx, r15.xyzx, r17.xyzx
        bfi r9.xyz, l(7, 7, 7, 0), r16.xyzx, r9.xyzx, l(0, 0, 0, 0)
        and r9.xyz, r9.xyzx, l(127, 127, 127, 0)
        movc r9.xyz, r15.xyzx, r14.xyzx, r9.xyzx
        ishl r14.xyz, r17.xyzx, l(23, 23, 23, 0)
        iadd r14.xyz, r14.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r9.xyz, r9.xyzx, l(16, 16, 16, 0)
        iadd r9.xyz, r14.xyzx, r9.xyzx
        movc r12.xyz, r13.xyzx, r9.xyzx, l(0,0,0,0)
        ushr r9.xyzw, r8.ywww, l(30, 10, 20, 30)
        utof r13.xy, r9.xwxx
        mov r9.x, r8.w
        and r14.xyz, r9.xyzx, l(1023, 1023, 1023, 0)
        and r15.xyz, r9.xyzx, l(127, 127, 127, 0)
        ubfe r16.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r9.xyzx
        firstbit_hi r17.xyz, r15.xyzx
        iadd r17.xyz, r17.xyzx, l(-24, -24, -24, 0)
        movc r17.xyz, r15.xyzx, r17.xyzx, l(8,8,8,0)
        iadd r18.xyz, -r17.xyzx, l(1, 1, 1, 0)
        movc r18.xyz, r16.xyzx, r16.xyzx, r18.xyzx
        bfi r9.xyz, l(7, 7, 7, 0), r17.xyzx, r9.xyzx, l(0, 0, 0, 0)
        and r9.xyz, r9.xyzx, l(127, 127, 127, 0)
        movc r9.xyz, r16.xyzx, r15.xyzx, r9.xyzx
        ishl r15.xyz, r18.xyzx, l(23, 23, 23, 0)
        iadd r15.xyz, r15.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r9.xyz, r9.xyzx, l(16, 16, 16, 0)
        iadd r9.xyz, r15.xyzx, r9.xyzx
        movc r8.xzw, r14.yyzx, r9.yyzx, l(0,0,0,0)
        mul r9.xy, r13.xyxx, l(0.333333, 0.333333, 0.000000, 0.000000)
        mov r10.w, r4.x
        mov r11.w, r4.z
        mov r12.w, r9.x
        mov r8.y, r9.y
        break 
        case l(4)
        ishl r9.xyzw, r8.xzyw, l(16, 16, 16, 16)
        mov r13.xz, r9.xxyx
        mov r13.yw, r8.xxxz
        ishr r13.xyzw, r13.xyzw, l(16, 16, 16, 16)
        itof r13.xyzw, r13.xyzw
        mul r13.xyzw, r13.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r10.xy, r13.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        max r11.xy, r13.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
        mov r8.xz, r9.zzwz
        ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r12.xy, r9.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        max r8.xw, r9.wwwz, l(-1.000000, 0.000000, 0.000000, -1.000000)
        mov r10.zw, l(0,0,0,0)
        mov r11.zw, l(0,0,0,0)
        mov r12.zw, l(0,0,0,0)
        mov r8.yz, l(0,0,0,0)
        break 
        case l(6)
        ushr r9.xyzw, r8.xzyw, l(16, 16, 16, 16)
        f16tof32 r10.x, r8.x
        f16tof32 r10.y, r9.x
        f16tof32 r11.x, r8.z
        f16tof32 r11.y, r9.y
        f16tof32 r12.x, r8.y
        f16tof32 r12.y, r9.z
        f16tof32 r8.w, r8.w
        f16tof32 r8.x, r9.w
        mov r10.zw, l(0,0,0,0)
        mov r11.zw, l(0,0,0,0)
        mov r12.zw, l(0,0,0,0)
        mov r8.yz, l(0,0,0,0)
        break 
        default 
        mov r10.x, r8.x
        mov r10.yzw, l(0,0,0,0)
        mov r11.x, r8.z
        mov r11.yzw, l(0,0,0,0)
        mov r12.x, r8.y
        mov r12.yzw, l(0,0,0,0)
        mov r8.xyz, l(0,0,0,0)
        break 
      endswitch 
    endif 
    add r9.xyzw, r5.xyzw, r10.xyzw
    add r10.xyzw, r6.xyzw, r11.xyzw
    add r11.xyzw, r7.xyzw, r12.xyzw
    add r8.xyzw, r1.wxzy, r8.wxzy
    ld r4.xyzw, r4.yyyy, T0[0].xzyw
    if_nz r3.z
      iadd r0.y, r0.w, l(163)
      ld r12.xyzw, r0.yyyy, T0[0].xzyw
      switch r3.w
        case l(5)
        ishl r16.xyzw, r4.xzyw, l(16, 16, 16, 16)
        mov r17.xz, r16.xxyx
        mov r17.yw, r4.xxxz
        ishr r17.xyzw, r17.xyzw, l(16, 16, 16, 16)
        itof r17.xyzw, r17.xyzw
        mul r17.xyzw, r17.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r13.xyzw, r17.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        mov r4.xz, r16.zzwz
        ishr r16.xyzw, r4.xyzw, l(16, 16, 16, 16)
        itof r16.xyzw, r16.xyzw
        mul r16.xyzw, r16.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r14.xyzw, r16.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ishl r16.xyzw, r12.xzyw, l(16, 16, 16, 16)
        mov r17.xz, r16.xxyx
        mov r17.yw, r12.xxxz
        ishr r17.xyzw, r17.xyzw, l(16, 16, 16, 16)
        itof r17.xyzw, r17.xyzw
        mul r17.xyzw, r17.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r15.xyzw, r17.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        mov r12.xz, r16.zzwz
        ishr r16.xyzw, r12.xyzw, l(16, 16, 16, 16)
        itof r16.xyzw, r16.xyzw
        mul r16.xyzw, r16.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r4.xyzw, r16.ywzx, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        ushr r16.xyzw, r4.xzyw, l(16, 16, 16, 16)
        f16tof32 r13.xz, r4.xxzx
        f16tof32 r13.yw, r16.xxxy
        f16tof32 r14.xz, r4.yywy
        f16tof32 r14.yw, r16.zzzw
        ushr r16.xyzw, r12.xzyw, l(16, 16, 16, 16)
        f16tof32 r15.xz, r12.xxzx
        f16tof32 r15.yw, r16.xxxy
        f16tof32 r4.zw, r12.wwwy
        f16tof32 r4.xy, r16.zwzz
        break 
        default 
        mov r13.xy, r4.xzxx
        mov r13.zw, l(0,0,0,0)
        mov r14.xy, r4.ywyy
        mov r14.zw, l(0,0,0,0)
        mov r15.xy, r12.xzxx
        mov r15.zw, l(0,0,0,0)
        mov r4.xw, r12.wwwy
        mov r4.yz, l(0,0,0,0)
        break 
      endswitch 
    else 
      switch r3.w
        case l(0)
        case l(1)
        ushr r12.yzw, r4.xxxx, l(0, 8, 16, 24)
        mov r12.x, r4.x
        and r12.xyzw, r12.xyzw, l(255, 255, 255, 255)
        utof r12.xyzw, r12.xyzw
        mul r13.xyzw, r12.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r12.yzw, r4.zzzz, l(0, 8, 16, 24)
        mov r12.x, r4.z
        and r12.xyzw, r12.xyzw, l(255, 255, 255, 255)
        utof r12.xyzw, r12.xyzw
        mul r14.xyzw, r12.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r12.yzw, r4.yyyy, l(0, 8, 16, 24)
        mov r12.x, r4.y
        and r12.xyzw, r12.xyzw, l(255, 255, 255, 255)
        utof r12.xyzw, r12.xyzw
        mul r15.xyzw, r12.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r4.xyz, r4.wwww, l(8, 24, 16, 0)
        and r12.xyzw, r4.wxzy, l(255, 255, 255, 255)
        utof r12.xyzw, r12.xyzw
        mul r4.xyzw, r12.ywzx, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        ushr r12.yzw, r4.xxxx, l(0, 10, 20, 30)
        mov r12.x, r4.x
        and r12.xyzw, r12.xyzw, l(1023, 1023, 1023, 3)
        utof r12.xyzw, r12.xyzw
        mul r13.xyzw, r12.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r12.yzw, r4.zzzz, l(0, 10, 20, 30)
        mov r12.x, r4.z
        and r12.xyzw, r12.xyzw, l(1023, 1023, 1023, 3)
        utof r12.xyzw, r12.xyzw
        mul r14.xyzw, r12.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r12.yzw, r4.yyyy, l(0, 10, 20, 30)
        mov r12.x, r4.y
        and r12.xyzw, r12.xyzw, l(1023, 1023, 1023, 3)
        utof r12.xyzw, r12.xyzw
        mul r15.xyzw, r12.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r4.xyz, r4.wwww, l(10, 30, 20, 0)
        and r12.xyzw, r4.wxzy, l(1023, 1023, 1023, 3)
        utof r12.xyzw, r12.xyzw
        mul r4.xyzw, r12.ywzx, l(0.000978, 0.333333, 0.000978, 0.000978)
        break 
        case l(3)
        case l(12)
        ushr r12.xyzw, r4.xxxz, l(10, 20, 30, 30)
        mov r16.x, r4.x
        mov r16.yz, r12.xxyx
        and r3.yzw, r16.xxyz, l(0, 1023, 1023, 1023)
        and r17.xyz, r16.xyzx, l(127, 127, 127, 0)
        ubfe r18.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r16.xyzx
        firstbit_hi r19.xyz, r17.xyzx
        iadd r19.xyz, r19.xyzx, l(-24, -24, -24, 0)
        movc r19.xyz, r17.xyzx, r19.xyzx, l(8,8,8,0)
        iadd r20.xyz, -r19.xyzx, l(1, 1, 1, 0)
        movc r20.xyz, r18.xyzx, r18.xyzx, r20.xyzx
        bfi r16.xyz, l(7, 7, 7, 0), r19.xyzx, r16.xyzx, l(0, 0, 0, 0)
        and r16.xyz, r16.xyzx, l(127, 127, 127, 0)
        movc r16.xyz, r18.xyzx, r17.xyzx, r16.xyzx
        ishl r17.xyz, r20.xyzx, l(23, 23, 23, 0)
        iadd r17.xyz, r17.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r16.xyz, r16.xyzx, l(16, 16, 16, 0)
        iadd r16.xyz, r17.xyzx, r16.xyzx
        movc r13.xyz, r3.yzwy, r16.xyzx, l(0,0,0,0)
        utof r0.yw, r12.zzzw
        ushr r12.xyzw, r4.zyyz, l(10, 10, 20, 20)
        mov r16.x, r4.z
        mov r16.yz, r12.xxwx
        and r3.yzw, r16.xxyz, l(0, 1023, 1023, 1023)
        and r17.xyz, r16.xyzx, l(127, 127, 127, 0)
        ubfe r18.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r16.xyzx
        firstbit_hi r19.xyz, r17.xyzx
        iadd r19.xyz, r19.xyzx, l(-24, -24, -24, 0)
        movc r19.xyz, r17.xyzx, r19.xyzx, l(8,8,8,0)
        iadd r20.xyz, -r19.xyzx, l(1, 1, 1, 0)
        movc r20.xyz, r18.xyzx, r18.xyzx, r20.xyzx
        bfi r16.xyz, l(7, 7, 7, 0), r19.xyzx, r16.xyzx, l(0, 0, 0, 0)
        and r16.xyz, r16.xyzx, l(127, 127, 127, 0)
        movc r16.xyz, r18.xyzx, r17.xyzx, r16.xyzx
        ishl r17.xyz, r20.xyzx, l(23, 23, 23, 0)
        iadd r17.xyz, r17.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r16.xyz, r16.xyzx, l(16, 16, 16, 0)
        iadd r16.xyz, r17.xyzx, r16.xyzx
        movc r14.xyz, r3.yzwy, r16.xyzx, l(0,0,0,0)
        mul r0.yw, r0.yyyw, l(0.000000, 0.333333, 0.000000, 0.333333)
        mov r12.x, r4.y
        and r3.yzw, r12.xxyz, l(0, 1023, 1023, 1023)
        and r16.xyz, r12.xyzx, l(127, 127, 127, 0)
        ubfe r17.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r12.xyzx
        firstbit_hi r18.xyz, r16.xyzx
        iadd r18.xyz, r18.xyzx, l(-24, -24, -24, 0)
        movc r18.xyz, r16.xyzx, r18.xyzx, l(8,8,8,0)
        iadd r19.xyz, -r18.xyzx, l(1, 1, 1, 0)
        movc r19.xyz, r17.xyzx, r17.xyzx, r19.xyzx
        bfi r12.xyz, l(7, 7, 7, 0), r18.xyzx, r12.xyzx, l(0, 0, 0, 0)
        and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
        movc r12.xyz, r17.xyzx, r16.xyzx, r12.xyzx
        ishl r16.xyz, r19.xyzx, l(23, 23, 23, 0)
        iadd r16.xyz, r16.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r12.xyz, r12.xyzx, l(16, 16, 16, 0)
        iadd r12.xyz, r16.xyzx, r12.xyzx
        movc r15.xyz, r3.yzwy, r12.xyzx, l(0,0,0,0)
        ushr r12.xyzw, r4.ywww, l(30, 10, 20, 30)
        utof r3.yz, r12.xxwx
        mov r12.x, r4.w
        and r16.xyz, r12.xyzx, l(1023, 1023, 1023, 0)
        and r17.xyz, r12.xyzx, l(127, 127, 127, 0)
        ubfe r18.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r12.xyzx
        firstbit_hi r19.xyz, r17.xyzx
        iadd r19.xyz, r19.xyzx, l(-24, -24, -24, 0)
        movc r19.xyz, r17.xyzx, r19.xyzx, l(8,8,8,0)
        iadd r20.xyz, -r19.xyzx, l(1, 1, 1, 0)
        movc r20.xyz, r18.xyzx, r18.xyzx, r20.xyzx
        bfi r12.xyz, l(7, 7, 7, 0), r19.xyzx, r12.xyzx, l(0, 0, 0, 0)
        and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
        movc r12.xyz, r18.xyzx, r17.xyzx, r12.xyzx
        ishl r17.xyz, r20.xyzx, l(23, 23, 23, 0)
        iadd r17.xyz, r17.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r12.xyz, r12.xyzx, l(16, 16, 16, 0)
        iadd r12.xyz, r17.xyzx, r12.xyzx
        movc r4.xzw, r16.yyzx, r12.yyzx, l(0,0,0,0)
        mul r3.yz, r3.yyzy, l(0.000000, 0.333333, 0.333333, 0.000000)
        mov r13.w, r0.y
        mov r14.w, r0.w
        mov r15.w, r3.y
        mov r4.y, r3.z
        break 
        case l(4)
        ishl r12.xyzw, r4.xzyw, l(16, 16, 16, 16)
        mov r16.xz, r12.xxyx
        mov r16.yw, r4.xxxz
        ishr r16.xyzw, r16.xyzw, l(16, 16, 16, 16)
        itof r16.xyzw, r16.xyzw
        mul r16.xyzw, r16.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r13.xy, r16.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        max r14.xy, r16.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
        mov r4.xz, r12.zzwz
        ishr r12.xyzw, r4.xyzw, l(16, 16, 16, 16)
        itof r12.xyzw, r12.xyzw
        mul r12.xyzw, r12.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r15.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        max r4.xw, r12.wwwz, l(-1.000000, 0.000000, 0.000000, -1.000000)
        mov r13.zw, l(0,0,0,0)
        mov r14.zw, l(0,0,0,0)
        mov r15.zw, l(0,0,0,0)
        mov r4.yz, l(0,0,0,0)
        break 
        case l(6)
        ushr r12.xyzw, r4.xzyw, l(16, 16, 16, 16)
        f16tof32 r13.x, r4.x
        f16tof32 r13.y, r12.x
        f16tof32 r14.x, r4.z
        f16tof32 r14.y, r12.y
        f16tof32 r15.x, r4.y
        f16tof32 r15.y, r12.z
        f16tof32 r4.w, r4.w
        f16tof32 r4.x, r12.w
        mov r13.zw, l(0,0,0,0)
        mov r14.zw, l(0,0,0,0)
        mov r15.zw, l(0,0,0,0)
        mov r4.yz, l(0,0,0,0)
        break 
        default 
        mov r13.x, r4.x
        mov r13.yzw, l(0,0,0,0)
        mov r14.x, r4.z
        mov r14.yzw, l(0,0,0,0)
        mov r15.x, r4.y
        mov r15.yzw, l(0,0,0,0)
        mov r4.xyz, l(0,0,0,0)
        break 
      endswitch 
    endif 
    add r5.xyzw, r9.xyzw, r13.xyzw
    add r6.xyzw, r10.xyzw, r14.xyzw
    add r7.xyzw, r11.xyzw, r15.xyzw
    add r1.xyzw, r4.xyzw, r8.ywzx
  else 
    mov r2.y, r3.x
  endif 
endif 
mul r3.xyzw, r2.yyyy, r5.xyzw
mul r4.xyzw, r2.yyyy, r6.xzwy
mul r5.xyzw, r2.yyyy, r7.xyzw
mul r1.xyzw, r1.wzyx, r2.yyyy
if_nz r2.z
  mov r3.xz, r3.zzxz
  mov r6.xz, r4.yyxy
  mov r5.xz, r5.zzxz
  mov r7.xz, r1.yyxy
else 
  mov r6.xz, r4.xxyx
  mov r7.xz, r1.xxyx
endif 
ubfe r0.y, l(6), l(7), CB0[0][0].z
switch r0.y
  case l(26)
  mov_sat r3.xyzw, r3.xyzw
  mad r8.xyzw, r3.xyzw, l(65535.000000, 65535.000000, 65535.000000, 65535.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r4.xy, r8.ywyy, l(0x00010000, 0x00010000, 0, 0), r8.xzxx
  mov r6.yw, r4.wwwz
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(65535.000000, 65535.000000, 65535.000000, 65535.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r4.zw, r8.yyyw, l(0, 0, 0x00010000, 0x00010000), r8.xxxz
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(65535.000000, 65535.000000, 65535.000000, 65535.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.xy, r8.ywyy, l(0x00010000, 0x00010000, 0, 0), r8.xzxx
  mov r7.yw, r1.wwwz
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(65535.000000, 65535.000000, 65535.000000, 65535.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.zw, r8.yyyw, l(0, 0, 0x00010000, 0x00010000), r8.xxxz
  break 
  case l(32)
  f32tof16 r8.xy, r3.xzxx
  f32tof16 r8.zw, r6.xxxz
  f32tof16 r9.xy, r3.ywyy
  f32tof16 r9.zw, r4.wwwz
  imad r4.xyzw, r9.xyzw, l(0x00010000, 0x00010000, 0x00010000, 0x00010000), r8.xyzw
  f32tof16 r8.xy, r5.xzxx
  f32tof16 r8.zw, r7.xxxz
  f32tof16 r9.xy, r5.ywyy
  f32tof16 r9.zw, r1.wwwz
  imad r1.xyzw, r9.xyzw, l(0x00010000, 0x00010000, 0x00010000, 0x00010000), r8.xyzw
  break 
  default 
  mov r4.xy, r3.xyxx
  mov r4.z, r6.x
  mov r1.xy, r5.xyxx
  mov r1.z, r7.x
  break 
endswitch 
if_nz r2.w
  if_z vThreadID.x
    mov r4.xy, r4.zwzz
    mov r1.xy, r1.zwzz
  endif 
  if_z vThreadID.y
    mov r4.xyzw, r1.xyzw
  endif 
endif 
bfi r0.xyzw, l(2, 2, 2, 2), l(3, 3, 3, 3), r0.zxxz, l(0, 0, 0, 0)
iadd r0.xyzw, r0.xyzw, vThreadID.xyyx
and r3.xy, CB0[0][0].wzww, l(0x00003fff, 8, 0, 0)
if_nz r3.y
  ubfe r3.zw, l(0, 0, 3, 14), l(0, 0, 4, 16), CB0[0][0].zzzw
  iadd r2.yz, r3.wwxw, l(0, 31, 31, 0)
  ishr r5.xyzw, r0.zwzw, l(4, 5, 3, 3)
  ishr r2.w, r3.z, l(2)
  ushr r2.yz, r2.yyzy, l(0, 4, 5, 0)
  and r2.y, r2.y, l(2046)
  imad r2.y, r2.w, r2.y, r5.x
  imad r2.y, r2.y, r2.z, r5.y
  ishl r2.z, r0.z, l(11)
  and r2.z, r2.z, l(0x00003000)
  bfi r2.z, l(3), l(9), r0.w, r2.z
  ishr r2.z, r2.z, l(6)
  iadd r2.w, r2.w, r5.z
  bfi r3.y, l(1), l(1), r2.w, l(0)
  iadd r3.y, r3.y, r5.w
  bfi r3.y, l(2), l(1), r3.y, l(0)
  bfi r2.w, l(1), l(0), r2.w, r3.y
  and r3.y, r2.z, l(240)
  bfi r5.xy, l(19, 19, 0, 0), l(11, 14, 0, 0), r2.yyyy, l(0, 0, 0, 0)
  imad r3.yw, r3.yyyy, l(0, 2, 0, 16), r5.xxxy
  bfi r2.yz, l(0, 4, 4, 0), l(0, 0, 3, 0), r2.zzzz, r3.yywy
  bfi r2.yz, l(0, 2, 2, 0), l(0, 9, 12, 0), r3.zzzz, r2.yyzy
  ubfe r3.y, l(3), l(6), r2.y
  and r3.z, r2.w, l(6)
  bfi r2.w, l(1), l(8), r2.w, l(0)
  imad r2.w, r3.y, l(32), r2.w
  imad r2.w, r3.z, l(4), r2.w
  bfi r2.yz, l(0, 1, 1, 0), l(0, 4, 7, 0), r0.zzzz, r2.yyzy
  bfi r2.z, l(9), l(3), r2.w, r2.z
  bfi r2.y, l(6), l(0), r2.y, r2.z
else 
  ishr r5.xyzw, r0.xyzw, l(5, 5, 2, 3)
  iadd r0.x, r3.x, l(31)
  ushr r0.x, r0.x, l(5)
  imad r0.x, r5.y, r0.x, r5.x
  ishl r2.zw, r0.zzzz, l(0, 0, 5, 7)
  and r2.zw, r2.zzzw, l(0, 0, 448, 2048)
  bfi r0.y, l(3), l(3), r0.w, r2.z
  ishl r2.z, r2.z, l(1)
  bfi r0.w, l(3), l(4), r0.w, r2.z
  and r0.w, r0.w, l(992)
  bfi r2.z, l(22), l(10), r0.x, r0.w
  bfi r2.z, l(4), l(0), r0.y, r2.z
  bfi r2.z, l(1), l(4), r0.z, r2.z
  ishl r3.xy, r0.wwww, l(3, 2, 0, 0)
  bfi r0.xw, l(22, 0, 0, 22), l(13, 0, 0, 12), r0.xxxx, r3.xxxy
  bfi r0.xy, l(4, 4, 0, 0), l(3, 2, 0, 0), r0.yyyy, r0.xwxx
  bfi r0.xy, l(1, 1, 0, 0), l(7, 6, 0, 0), r0.zzzz, r0.xyxx
  bfi r0.x, l(12), l(0), r2.w, r0.x
  and r0.y, r0.y, l(1792)
  iadd r0.x, r0.x, r0.y
  and r0.y, r5.z, l(2)
  iadd r0.y, r5.w, r0.y
  bfi r0.y, l(2), l(6), r0.y, l(0)
  iadd r0.x, r0.x, r0.y
  bfi r2.y, l(6), l(0), r2.z, r0.x
endif 
ushr r0.x, r2.y, l(2)
ieq r0.y, r2.x, l(4)
if_nz r0.y
  mov r4.xyzw, r4.yxwz
  mov r0.z, l(2)
else 
  mov r0.z, r2.x
endif 
ieq r2.yzw, r0.zzzz, l(0, 1, 2, 3)
or r0.zw, r2.zzzw, r2.yyyz
if_nz r0.z
  ishl r3.xyzw, r4.xyzw, l(8, 8, 8, 8)
  and r3.xyzw, r3.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r5.xyzw, r4.xyzw, l(8, 8, 8, 8)
  and r5.xyzw, r5.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r4.xyzw, r3.xyzw, r5.xyzw
endif 
if_nz r0.w
  ushr r3.xyzw, r4.xyzw, l(16, 16, 16, 16)
  bfi r4.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r4.xyzw, r3.xyzw
endif 
store_uav_typed U0[0].xyzw, r0.xxxx, r4.xyzw
iadd r0.z, r0.x, l(1)
if_nz r0.y
  mov r1.zw, r1.wwwz
  mov r1.xyzw, r1.yxzw
  mov r2.x, l(2)
endif 
ieq r2.xyz, r2.xxxx, l(1, 2, 3, 0)
or r0.yw, r2.yyyz, r2.xxxy
if_nz r0.y
  ishl r2.xyzw, r1.xyzw, l(8, 8, 8, 8)
  and r2.xyzw, r2.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r3.xyzw, r1.xyzw, l(8, 8, 8, 8)
  and r3.xyzw, r3.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r1.xyzw, r2.xyzw, r3.xyzw
endif 
if_nz r0.w
  ushr r2.xyzw, r1.xyzw, l(16, 16, 16, 16)
  bfi r1.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r1.xyzw, r2.xyzw
endif 
store_uav_typed U0[0].xyzw, r0.zzzz, r1.xyzw
ret 
// Approximately 1150 instruction slots used
