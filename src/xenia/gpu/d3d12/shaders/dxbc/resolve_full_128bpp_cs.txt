//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint xe_resolve_edram_info;        // Offset:    0 Size:     4
//   uint xe_resolve_address_info;      // Offset:    4 Size:     4
//   uint xe_resolve_dest_info;         // Offset:    8 Size:     4
//   uint xe_resolve_dest_pitch;        // Offset:   12 Size:     4
//   uint xe_resolve_dest_base;         // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_source                 texture    byte         r/o      T0             t0      1 
// xe_resolve_dest                       UAV   uint4         buf      U0             u0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][2], immediateIndexed, space=0
dcl_resource_raw T0[0:0], space=0
dcl_uav_typed_buffer (uint,uint,uint,uint) U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 15
dcl_thread_group 8, 8, 1
ishl r0.xw, vThreadID.xxxx, l(1, 0, 0, 1)
ushr r1.x, CB0[0][0].y, l(7)
bfi r1.x, l(11), l(3), r1.x, l(0)
uge r1.x, r0.w, r1.x
if_nz r1.x
  ret 
endif 
ushr r1.xy, CB0[0][0].yyyy, l(5, 29, 0, 0)
mov r1.z, CB0[0][0].y
bfi r2.xy, l(5, 2, 0, 0), l(3, 3, 0, 0), r1.zxzz, l(0, 0, 0, 0)
mov r0.yz, vThreadID.yyyy
iadd r2.xy, r0.wzww, r2.xyxx
and r3.xyzw, CB0[0][0].xzwz, l(1023, 0x01000000, 0x00003fff, 7)
ubfe r4.xyzw, l(12, 2, 1, 4), l(13, 10, 29, 25), CB0[0][0].xxxx
uge r1.w, l(3), r1.y
if_nz r1.w
  mov r5.y, r1.y
else 
  ieq r1.w, r1.y, l(5)
  if_nz r1.w
    mov r5.y, l(2)
  else 
    mov r5.y, l(0)
  endif 
endif 
uge r2.zw, r4.yyyy, l(0, 0, 2, 1)
and r2.zw, r2.zzzw, l(0, 0, 1, 1)
ishl r2.xy, r2.xyxx, r2.zwzz
ushr r5.x, r5.y, l(1)
and r5.xy, r5.xyxx, l(1, 1, 0, 0)
iadd r2.xy, r2.xyxx, r5.xyxx
udiv r1.w, null, r2.x, l(80)
ushr r2.w, r2.y, l(4)
movc r4.y, r4.z, l(1), l(0)
ishl r5.x, r1.w, r4.y
imad r5.x, r2.w, r3.x, r5.x
iadd r4.x, r4.x, r5.x
ineg r5.x, r1.w
ineg r5.y, r2.w
imad r2.xy, r5.xyxx, l(80, 16, 0, 0), r2.xyxx
imad r1.w, r2.y, l(80), r2.x
ishl r1.w, r1.w, r4.y
imad r1.w, r4.x, l(1280), r1.w
iadd r2.x, r2.z, r4.z
ishl r2.x, l(4), r2.x
ishl r1.w, r1.w, l(2)
if_nz r4.z
  ieq r2.y, r2.x, l(8)
  if_nz r2.y
    ld_raw r5.xyzw, r1.w, T0[0].zwxy
    mov r6.xy, r5.zwzz
  else 
    ld_raw r6.xy, r1.w, T0[0].xyxx
    iadd r2.y, r2.x, r1.w
    ld_raw r5.xy, r2.y, T0[0].xyxx
  endif 
  switch r4.w
    case l(5)
    ishl r6.zw, r6.xxxy, l(0, 0, 16, 16)
    ishr r7.xyzw, r6.zxwy, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    ishl r5.zw, r5.xxxy, l(0, 0, 16, 16)
    ishr r7.xyzw, r5.zxwy, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.yz, r6.xxyx, l(0, 16, 16, 0)
    f16tof32 r6.xz, r6.xxyx
    f16tof32 r6.yw, r2.yyyz
    ushr r2.yz, r5.xxyx, l(0, 16, 16, 0)
    f16tof32 r5.xz, r5.xxyx
    f16tof32 r5.yw, r2.yyyz
    break 
    default 
    mov r6.zw, l(0,0,0,0)
    mov r5.zw, l(0,0,0,0)
    break 
  endswitch 
else 
  ieq r2.y, r2.x, l(4)
  if_nz r2.y
    ld_raw r5.xy, r1.w, T0[0].yxxx
    mov r6.x, r5.y
  else 
    ld_raw r6.x, r1.w, T0[0].xxxx
    iadd r2.y, r2.x, r1.w
    ld_raw r5.x, r2.y, T0[0].xxxx
  endif 
  switch r4.w
    case l(0)
    case l(1)
    ushr r6.yzw, r6.xxxx, l(0, 8, 16, 24)
    and r7.xyzw, r6.xyzw, l(255, 255, 255, 255)
    utof r7.xyzw, r7.xyzw
    mul r6.xyzw, r7.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    ushr r5.yzw, r5.xxxx, l(0, 8, 16, 24)
    and r7.xyzw, r5.xyzw, l(255, 255, 255, 255)
    utof r7.xyzw, r7.xyzw
    mul r5.xyzw, r7.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    break 
    case l(2)
    case l(10)
    ushr r6.yzw, r6.xxxx, l(0, 10, 20, 30)
    and r7.xyzw, r6.xyzw, l(1023, 1023, 1023, 3)
    utof r7.xyzw, r7.xyzw
    mul r6.xyzw, r7.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
    ushr r5.yzw, r5.xxxx, l(0, 10, 20, 30)
    and r7.xyzw, r5.xyzw, l(1023, 1023, 1023, 3)
    utof r7.xyzw, r7.xyzw
    mul r5.xyzw, r7.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
    break 
    case l(3)
    case l(12)
    ushr r6.yzw, r6.xxxx, l(0, 10, 20, 30)
    and r2.yzw, r6.xxyz, l(0, 1023, 1023, 1023)
    and r7.xyz, r6.xyzx, l(127, 127, 127, 0)
    ubfe r8.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r6.xyzx
    firstbit_hi r9.xyz, r7.xyzx
    iadd r9.xyz, r9.xyzx, l(-24, -24, -24, 0)
    movc r9.xyz, r7.xyzx, r9.xyzx, l(8,8,8,0)
    iadd r10.xyz, -r9.xyzx, l(1, 1, 1, 0)
    movc r10.xyz, r8.xyzx, r8.xyzx, r10.xyzx
    bfi r9.xyz, l(7, 7, 7, 0), r9.xyzx, r6.xyzx, l(0, 0, 0, 0)
    and r9.xyz, r9.xyzx, l(127, 127, 127, 0)
    movc r7.xyz, r8.xyzx, r7.xyzx, r9.xyzx
    ishl r8.xyz, r10.xyzx, l(23, 23, 23, 0)
    iadd r8.xyz, r8.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r7.xyz, r7.xyzx, l(16, 16, 16, 0)
    iadd r7.xyz, r8.xyzx, r7.xyzx
    movc r6.xyz, r2.yzwy, r7.xyzx, l(0,0,0,0)
    utof r2.y, r6.w
    mul r6.w, r2.y, l(0.333333)
    ushr r5.yzw, r5.xxxx, l(0, 10, 20, 30)
    and r2.yzw, r5.xxyz, l(0, 1023, 1023, 1023)
    and r7.xyz, r5.xyzx, l(127, 127, 127, 0)
    ubfe r8.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r5.xyzx
    firstbit_hi r9.xyz, r7.xyzx
    iadd r9.xyz, r9.xyzx, l(-24, -24, -24, 0)
    movc r9.xyz, r7.xyzx, r9.xyzx, l(8,8,8,0)
    iadd r10.xyz, -r9.xyzx, l(1, 1, 1, 0)
    movc r10.xyz, r8.xyzx, r8.xyzx, r10.xyzx
    bfi r9.xyz, l(7, 7, 7, 0), r9.xyzx, r5.xyzx, l(0, 0, 0, 0)
    and r9.xyz, r9.xyzx, l(127, 127, 127, 0)
    movc r7.xyz, r8.xyzx, r7.xyzx, r9.xyzx
    ishl r8.xyz, r10.xyzx, l(23, 23, 23, 0)
    iadd r8.xyz, r8.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
    ishl r7.xyz, r7.xyzx, l(16, 16, 16, 0)
    iadd r7.xyz, r8.xyzx, r7.xyzx
    movc r5.xyz, r2.yzwy, r7.xyzx, l(0,0,0,0)
    utof r2.y, r5.w
    mul r5.w, r2.y, l(0.333333)
    break 
    case l(4)
    ishl r6.y, r6.x, l(16)
    ishr r2.yz, r6.yyxy, l(0, 16, 16, 0)
    itof r2.yz, r2.yyzy
    mul r2.yz, r2.yyzy, l(0.000000, 0.000977, 0.000977, 0.000000)
    max r6.xy, r2.yzyy, l(-1.000000, -1.000000, 0.000000, 0.000000)
    ishl r5.y, r5.x, l(16)
    ishr r2.yz, r5.yyxy, l(0, 16, 16, 0)
    itof r2.yz, r2.yyzy
    mul r2.yz, r2.yyzy, l(0.000000, 0.000977, 0.000977, 0.000000)
    max r5.xy, r2.yzyy, l(-1.000000, -1.000000, 0.000000, 0.000000)
    mov r6.zw, l(0,0,0,0)
    mov r5.zw, l(0,0,0,0)
    break 
    case l(6)
    ushr r2.y, r6.x, l(16)
    f16tof32 r6.x, r6.x
    f16tof32 r6.y, r2.y
    ushr r2.y, r5.x, l(16)
    f16tof32 r5.x, r5.x
    f16tof32 r5.y, r2.y
    mov r6.zw, l(0,0,0,0)
    mov r5.zw, l(0,0,0,0)
    break 
    default 
    mov r6.yzw, l(0,0,0,0)
    mov r5.yzw, l(0,0,0,0)
    break 
  endswitch 
endif 
ibfe r2.y, l(6), l(16), CB0[0][0].z
ishl r2.y, r2.y, l(23)
iadd r2.y, r2.y, l(0x3f800000)
uge r2.z, r1.y, l(4)
if_nz r2.z
  mul r2.z, r2.y, l(0.500000)
  ishl r2.w, l(320), r4.z
  iadd r2.w, r1.w, r2.w
  if_nz r4.z
    ieq r4.x, r2.x, l(8)
    if_nz r4.x
      ld_raw r7.xyzw, r2.w, T0[0].zwxy
      mov r8.xy, r7.zwzz
    else 
      ld_raw r8.xy, r2.w, T0[0].xyxx
      iadd r4.x, r2.x, r2.w
      ld_raw r7.xy, r4.x, T0[0].xyxx
    endif 
    switch r4.w
      case l(5)
      ishl r8.zw, r8.xxxy, l(0, 0, 16, 16)
      ishr r9.xyzw, r8.zxwy, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      ishl r7.zw, r7.xxxy, l(0, 0, 16, 16)
      ishr r9.xyzw, r7.zxwy, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r8.xyxx, l(16, 16, 0, 0)
      f16tof32 r8.xz, r8.xxyx
      f16tof32 r8.yw, r4.xxxy
      ushr r4.xy, r7.xyxx, l(16, 16, 0, 0)
      f16tof32 r7.xz, r7.xxyx
      f16tof32 r7.yw, r4.xxxy
      break 
      default 
      mov r8.zw, l(0,0,0,0)
      mov r7.zw, l(0,0,0,0)
      break 
    endswitch 
  else 
    ieq r4.x, r2.x, l(4)
    if_nz r4.x
      ld_raw r7.xy, r2.w, T0[0].yxxx
      mov r8.x, r7.y
    else 
      ld_raw r8.x, r2.w, T0[0].xxxx
      iadd r2.w, r2.x, r2.w
      ld_raw r7.x, r2.w, T0[0].xxxx
    endif 
    switch r4.w
      case l(0)
      case l(1)
      ushr r8.yzw, r8.xxxx, l(0, 8, 16, 24)
      and r9.xyzw, r8.xyzw, l(255, 255, 255, 255)
      utof r9.xyzw, r9.xyzw
      mul r8.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      ushr r7.yzw, r7.xxxx, l(0, 8, 16, 24)
      and r9.xyzw, r7.xyzw, l(255, 255, 255, 255)
      utof r9.xyzw, r9.xyzw
      mul r7.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      break 
      case l(2)
      case l(10)
      ushr r8.yzw, r8.xxxx, l(0, 10, 20, 30)
      and r9.xyzw, r8.xyzw, l(1023, 1023, 1023, 3)
      utof r9.xyzw, r9.xyzw
      mul r8.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
      ushr r7.yzw, r7.xxxx, l(0, 10, 20, 30)
      and r9.xyzw, r7.xyzw, l(1023, 1023, 1023, 3)
      utof r9.xyzw, r9.xyzw
      mul r7.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
      break 
      case l(3)
      case l(12)
      ushr r8.yzw, r8.xxxx, l(0, 10, 20, 30)
      and r9.xyz, r8.xyzx, l(1023, 1023, 1023, 0)
      and r10.xyz, r8.xyzx, l(127, 127, 127, 0)
      ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r8.xyzx
      firstbit_hi r12.xyz, r10.xyzx
      iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
      movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
      iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
      movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
      bfi r12.xyz, l(7, 7, 7, 0), r12.xyzx, r8.xyzx, l(0, 0, 0, 0)
      and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
      movc r10.xyz, r11.xyzx, r10.xyzx, r12.xyzx
      ishl r11.xyz, r13.xyzx, l(23, 23, 23, 0)
      iadd r11.xyz, r11.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r10.xyz, r10.xyzx, l(16, 16, 16, 0)
      iadd r10.xyz, r11.xyzx, r10.xyzx
      movc r8.xyz, r9.xyzx, r10.xyzx, l(0,0,0,0)
      utof r2.w, r8.w
      mul r8.w, r2.w, l(0.333333)
      ushr r7.yzw, r7.xxxx, l(0, 10, 20, 30)
      and r9.xyz, r7.xyzx, l(1023, 1023, 1023, 0)
      and r10.xyz, r7.xyzx, l(127, 127, 127, 0)
      ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r7.xyzx
      firstbit_hi r12.xyz, r10.xyzx
      iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
      movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
      iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
      movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
      bfi r12.xyz, l(7, 7, 7, 0), r12.xyzx, r7.xyzx, l(0, 0, 0, 0)
      and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
      movc r10.xyz, r11.xyzx, r10.xyzx, r12.xyzx
      ishl r11.xyz, r13.xyzx, l(23, 23, 23, 0)
      iadd r11.xyz, r11.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
      ishl r10.xyz, r10.xyzx, l(16, 16, 16, 0)
      iadd r10.xyz, r11.xyzx, r10.xyzx
      movc r7.xyz, r9.xyzx, r10.xyzx, l(0,0,0,0)
      utof r2.w, r7.w
      mul r7.w, r2.w, l(0.333333)
      break 
      case l(4)
      ishl r8.y, r8.x, l(16)
      ishr r4.xy, r8.yxyy, l(16, 16, 0, 0)
      itof r4.xy, r4.xyxx
      mul r4.xy, r4.xyxx, l(0.000977, 0.000977, 0.000000, 0.000000)
      max r8.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
      ishl r7.y, r7.x, l(16)
      ishr r4.xy, r7.yxyy, l(16, 16, 0, 0)
      itof r4.xy, r4.xyxx
      mul r4.xy, r4.xyxx, l(0.000977, 0.000977, 0.000000, 0.000000)
      max r7.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
      mov r8.zw, l(0,0,0,0)
      mov r7.zw, l(0,0,0,0)
      break 
      case l(6)
      ushr r2.w, r8.x, l(16)
      f16tof32 r8.x, r8.x
      f16tof32 r8.y, r2.w
      ushr r2.w, r7.x, l(16)
      f16tof32 r7.x, r7.x
      f16tof32 r7.y, r2.w
      mov r8.zw, l(0,0,0,0)
      mov r7.zw, l(0,0,0,0)
      break 
      default 
      mov r8.yzw, l(0,0,0,0)
      mov r7.yzw, l(0,0,0,0)
      break 
    endswitch 
  endif 
  add r6.xyzw, r6.xyzw, r8.xyzw
  add r5.xyzw, r5.xyzw, r7.xyzw
  uge r1.y, r1.y, l(6)
  if_nz r1.y
    mul r2.y, r2.y, l(0.250000)
    ishl r4.xy, l(4, 324, 0, 0), r4.zzzz
    iadd r1.yw, r1.wwww, r4.xxxy
    if_nz r4.z
      ieq r2.w, r2.x, l(8)
      if_nz r2.w
        ld_raw r7.xyzw, r1.y, T0[0].zwxy
        mov r8.xy, r7.zwzz
      else 
        ld_raw r8.xy, r1.y, T0[0].xyxx
        iadd r2.w, r2.x, r1.y
        ld_raw r7.xy, r2.w, T0[0].xyxx
      endif 
      switch r4.w
        case l(5)
        ishl r8.zw, r8.xxxy, l(0, 0, 16, 16)
        ishr r9.xyzw, r8.zxwy, l(16, 16, 16, 16)
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ishl r7.zw, r7.xxxy, l(0, 0, 16, 16)
        ishr r9.xyzw, r7.zxwy, l(16, 16, 16, 16)
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        ushr r4.xy, r8.xyxx, l(16, 16, 0, 0)
        f16tof32 r8.xz, r8.xxyx
        f16tof32 r8.yw, r4.xxxy
        ushr r4.xy, r7.xyxx, l(16, 16, 0, 0)
        f16tof32 r7.xz, r7.xxyx
        f16tof32 r7.yw, r4.xxxy
        break 
        default 
        mov r8.zw, l(0,0,0,0)
        mov r7.zw, l(0,0,0,0)
        break 
      endswitch 
    else 
      ieq r2.w, r2.x, l(4)
      if_nz r2.w
        ld_raw r7.xy, r1.y, T0[0].yxxx
        mov r8.x, r7.y
      else 
        ld_raw r8.x, r1.y, T0[0].xxxx
        iadd r1.y, r2.x, r1.y
        ld_raw r7.x, r1.y, T0[0].xxxx
      endif 
      switch r4.w
        case l(0)
        case l(1)
        ushr r8.yzw, r8.xxxx, l(0, 8, 16, 24)
        and r9.xyzw, r8.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r7.yzw, r7.xxxx, l(0, 8, 16, 24)
        and r9.xyzw, r7.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r7.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        ushr r8.yzw, r8.xxxx, l(0, 10, 20, 30)
        and r9.xyzw, r8.xyzw, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r7.yzw, r7.xxxx, l(0, 10, 20, 30)
        and r9.xyzw, r7.xyzw, l(1023, 1023, 1023, 3)
        utof r9.xyzw, r9.xyzw
        mul r7.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        break 
        case l(3)
        case l(12)
        ushr r8.yzw, r8.xxxx, l(0, 10, 20, 30)
        and r9.xyz, r8.xyzx, l(1023, 1023, 1023, 0)
        and r10.xyz, r8.xyzx, l(127, 127, 127, 0)
        ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r8.xyzx
        firstbit_hi r12.xyz, r10.xyzx
        iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
        movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
        iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
        movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
        bfi r12.xyz, l(7, 7, 7, 0), r12.xyzx, r8.xyzx, l(0, 0, 0, 0)
        and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
        movc r10.xyz, r11.xyzx, r10.xyzx, r12.xyzx
        ishl r11.xyz, r13.xyzx, l(23, 23, 23, 0)
        iadd r11.xyz, r11.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r10.xyz, r10.xyzx, l(16, 16, 16, 0)
        iadd r10.xyz, r11.xyzx, r10.xyzx
        movc r8.xyz, r9.xyzx, r10.xyzx, l(0,0,0,0)
        utof r1.y, r8.w
        mul r8.w, r1.y, l(0.333333)
        ushr r7.yzw, r7.xxxx, l(0, 10, 20, 30)
        and r9.xyz, r7.xyzx, l(1023, 1023, 1023, 0)
        and r10.xyz, r7.xyzx, l(127, 127, 127, 0)
        ubfe r11.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r7.xyzx
        firstbit_hi r12.xyz, r10.xyzx
        iadd r12.xyz, r12.xyzx, l(-24, -24, -24, 0)
        movc r12.xyz, r10.xyzx, r12.xyzx, l(8,8,8,0)
        iadd r13.xyz, -r12.xyzx, l(1, 1, 1, 0)
        movc r13.xyz, r11.xyzx, r11.xyzx, r13.xyzx
        bfi r12.xyz, l(7, 7, 7, 0), r12.xyzx, r7.xyzx, l(0, 0, 0, 0)
        and r12.xyz, r12.xyzx, l(127, 127, 127, 0)
        movc r10.xyz, r11.xyzx, r10.xyzx, r12.xyzx
        ishl r11.xyz, r13.xyzx, l(23, 23, 23, 0)
        iadd r11.xyz, r11.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r10.xyz, r10.xyzx, l(16, 16, 16, 0)
        iadd r10.xyz, r11.xyzx, r10.xyzx
        movc r7.xyz, r9.xyzx, r10.xyzx, l(0,0,0,0)
        utof r1.y, r7.w
        mul r7.w, r1.y, l(0.333333)
        break 
        case l(4)
        ishl r8.y, r8.x, l(16)
        ishr r4.xy, r8.yxyy, l(16, 16, 0, 0)
        itof r4.xy, r4.xyxx
        mul r4.xy, r4.xyxx, l(0.000977, 0.000977, 0.000000, 0.000000)
        max r8.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        ishl r7.y, r7.x, l(16)
        ishr r4.xy, r7.yxyy, l(16, 16, 0, 0)
        itof r4.xy, r4.xyxx
        mul r4.xy, r4.xyxx, l(0.000977, 0.000977, 0.000000, 0.000000)
        max r7.xy, r4.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
        mov r8.zw, l(0,0,0,0)
        mov r7.zw, l(0,0,0,0)
        break 
        case l(6)
        ushr r1.y, r8.x, l(16)
        f16tof32 r8.x, r8.x
        f16tof32 r8.y, r1.y
        ushr r1.y, r7.x, l(16)
        f16tof32 r7.x, r7.x
        f16tof32 r7.y, r1.y
        mov r8.zw, l(0,0,0,0)
        mov r7.zw, l(0,0,0,0)
        break 
        default 
        mov r8.yzw, l(0,0,0,0)
        mov r7.yzw, l(0,0,0,0)
        break 
      endswitch 
    endif 
    add r8.xyzw, r6.xyzw, r8.xyzw
    add r7.xyzw, r5.xyzw, r7.xyzw
    if_nz r4.z
      ieq r1.y, r2.x, l(8)
      if_nz r1.y
        ld_raw r9.xyzw, r1.w, T0[0].zwxy
        mov r10.xy, r9.zwzz
      else 
        ld_raw r10.xy, r1.w, T0[0].xyxx
        iadd r1.y, r2.x, r1.w
        ld_raw r9.xy, r1.y, T0[0].xyxx
      endif 
      switch r4.w
        case l(5)
        ishl r10.zw, r10.xxxy, l(0, 0, 16, 16)
        ishr r11.xyzw, r10.zxwy, l(16, 16, 16, 16)
        itof r11.xyzw, r11.xyzw
        mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r10.xyzw, r11.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ishl r9.zw, r9.xxxy, l(0, 0, 16, 16)
        ishr r11.xyzw, r9.zxwy, l(16, 16, 16, 16)
        itof r11.xyzw, r11.xyzw
        mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r9.xyzw, r11.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        ushr r4.xy, r10.xyxx, l(16, 16, 0, 0)
        f16tof32 r10.xz, r10.xxyx
        f16tof32 r10.yw, r4.xxxy
        ushr r4.xy, r9.xyxx, l(16, 16, 0, 0)
        f16tof32 r9.xz, r9.xxyx
        f16tof32 r9.yw, r4.xxxy
        break 
        default 
        mov r10.zw, l(0,0,0,0)
        mov r9.zw, l(0,0,0,0)
        break 
      endswitch 
    else 
      ieq r1.y, r2.x, l(4)
      if_nz r1.y
        ld_raw r9.xy, r1.w, T0[0].yxxx
        mov r10.x, r9.y
      else 
        ld_raw r10.x, r1.w, T0[0].xxxx
        iadd r1.y, r2.x, r1.w
        ld_raw r9.x, r1.y, T0[0].xxxx
      endif 
      switch r4.w
        case l(0)
        case l(1)
        ushr r10.yzw, r10.xxxx, l(0, 8, 16, 24)
        and r4.xyzw, r10.xyzw, l(255, 255, 255, 255)
        utof r4.xyzw, r4.xyzw
        mul r10.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r9.yzw, r9.xxxx, l(0, 8, 16, 24)
        and r4.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r4.xyzw, r4.xyzw
        mul r9.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        ushr r10.yzw, r10.xxxx, l(0, 10, 20, 30)
        and r4.xyzw, r10.xyzw, l(1023, 1023, 1023, 3)
        utof r4.xyzw, r4.xyzw
        mul r10.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        ushr r9.yzw, r9.xxxx, l(0, 10, 20, 30)
        and r4.xyzw, r9.xyzw, l(1023, 1023, 1023, 3)
        utof r4.xyzw, r4.xyzw
        mul r9.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.333333)
        break 
        case l(3)
        case l(12)
        ushr r10.yzw, r10.xxxx, l(0, 10, 20, 30)
        and r4.xyz, r10.xyzx, l(1023, 1023, 1023, 0)
        and r11.xyz, r10.xyzx, l(127, 127, 127, 0)
        ubfe r12.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r10.xyzx
        firstbit_hi r13.xyz, r11.xyzx
        iadd r13.xyz, r13.xyzx, l(-24, -24, -24, 0)
        movc r13.xyz, r11.xyzx, r13.xyzx, l(8,8,8,0)
        iadd r14.xyz, -r13.xyzx, l(1, 1, 1, 0)
        movc r14.xyz, r12.xyzx, r12.xyzx, r14.xyzx
        bfi r13.xyz, l(7, 7, 7, 0), r13.xyzx, r10.xyzx, l(0, 0, 0, 0)
        and r13.xyz, r13.xyzx, l(127, 127, 127, 0)
        movc r11.xyz, r12.xyzx, r11.xyzx, r13.xyzx
        ishl r12.xyz, r14.xyzx, l(23, 23, 23, 0)
        iadd r12.xyz, r12.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r11.xyz, r11.xyzx, l(16, 16, 16, 0)
        iadd r11.xyz, r12.xyzx, r11.xyzx
        movc r10.xyz, r4.xyzx, r11.xyzx, l(0,0,0,0)
        utof r1.y, r10.w
        mul r10.w, r1.y, l(0.333333)
        ushr r9.yzw, r9.xxxx, l(0, 10, 20, 30)
        and r4.xyz, r9.xyzx, l(1023, 1023, 1023, 0)
        and r11.xyz, r9.xyzx, l(127, 127, 127, 0)
        ubfe r12.xyz, l(3, 3, 3, 0), l(7, 7, 7, 0), r9.xyzx
        firstbit_hi r13.xyz, r11.xyzx
        iadd r13.xyz, r13.xyzx, l(-24, -24, -24, 0)
        movc r13.xyz, r11.xyzx, r13.xyzx, l(8,8,8,0)
        iadd r14.xyz, -r13.xyzx, l(1, 1, 1, 0)
        movc r14.xyz, r12.xyzx, r12.xyzx, r14.xyzx
        bfi r13.xyz, l(7, 7, 7, 0), r13.xyzx, r9.xyzx, l(0, 0, 0, 0)
        and r13.xyz, r13.xyzx, l(127, 127, 127, 0)
        movc r11.xyz, r12.xyzx, r11.xyzx, r13.xyzx
        ishl r12.xyz, r14.xyzx, l(23, 23, 23, 0)
        iadd r12.xyz, r12.xyzx, l(0x3e000000, 0x3e000000, 0x3e000000, 0)
        ishl r11.xyz, r11.xyzx, l(16, 16, 16, 0)
        iadd r11.xyz, r12.xyzx, r11.xyzx
        movc r9.xyz, r4.xyzx, r11.xyzx, l(0,0,0,0)
        utof r1.y, r9.w
        mul r9.w, r1.y, l(0.333333)
        break 
        case l(4)
        ishl r10.y, r10.x, l(16)
        ishr r1.yw, r10.yyyx, l(0, 16, 0, 16)
        itof r1.yw, r1.yyyw
        mul r1.yw, r1.yyyw, l(0.000000, 0.000977, 0.000000, 0.000977)
        max r10.xy, r1.ywyy, l(-1.000000, -1.000000, 0.000000, 0.000000)
        ishl r9.y, r9.x, l(16)
        ishr r1.yw, r9.yyyx, l(0, 16, 0, 16)
        itof r1.yw, r1.yyyw
        mul r1.yw, r1.yyyw, l(0.000000, 0.000977, 0.000000, 0.000977)
        max r9.xy, r1.ywyy, l(-1.000000, -1.000000, 0.000000, 0.000000)
        mov r10.zw, l(0,0,0,0)
        mov r9.zw, l(0,0,0,0)
        break 
        case l(6)
        ushr r1.y, r10.x, l(16)
        f16tof32 r10.x, r10.x
        f16tof32 r10.y, r1.y
        ushr r1.y, r9.x, l(16)
        f16tof32 r9.x, r9.x
        f16tof32 r9.y, r1.y
        mov r10.zw, l(0,0,0,0)
        mov r9.zw, l(0,0,0,0)
        break 
        default 
        mov r10.yzw, l(0,0,0,0)
        mov r9.yzw, l(0,0,0,0)
        break 
      endswitch 
    endif 
    add r6.xyzw, r8.xyzw, r10.xyzw
    add r5.xyzw, r7.xyzw, r9.xyzw
  else 
    mov r2.y, r2.z
  endif 
endif 
mul r4.xyzw, r2.yyyy, r6.xyzw
mul r2.xyzw, r2.yyyy, r5.xyzw
if_nz r3.y
  mov r4.xz, r4.zzxz
  mov r2.xz, r2.zzxz
endif 
bfi r1.xyzw, l(2, 2, 2, 2), l(3, 3, 3, 3), r1.zxxz, l(0, 0, 0, 0)
iadd r0.xyzw, r0.xyzw, r1.xyzw
and r1.x, CB0[0][0].z, l(8)
if_nz r1.x
  ubfe r3.xy, l(3, 14, 0, 0), l(4, 16, 0, 0), CB0[0][0].zwzz
  iadd r1.xy, r3.yzyy, l(31, 31, 0, 0)
  ishr r5.xyzw, r0.zwzw, l(4, 5, 3, 3)
  ishr r1.z, r3.x, l(2)
  ushr r1.xy, r1.xyxx, l(4, 5, 0, 0)
  and r1.x, r1.x, l(2046)
  imad r1.x, r1.z, r1.x, r5.x
  imad r1.x, r1.x, r1.y, r5.y
  ishl r1.y, r0.z, l(12)
  and r1.y, r1.y, l(0x00006000)
  bfi r1.y, l(3), l(10), r0.w, r1.y
  ishr r1.y, r1.y, l(6)
  iadd r1.z, r1.z, r5.z
  bfi r1.w, l(1), l(1), r1.z, l(0)
  iadd r1.w, r1.w, r5.w
  bfi r1.w, l(2), l(1), r1.w, l(0)
  bfi r1.z, l(1), l(0), r1.z, r1.w
  bfi r1.xw, l(18, 0, 0, 18), l(12, 0, 0, 15), r1.xxxx, l(0, 0, 0, 0)
  imad r1.xy, r1.yyyy, l(2, 16, 0, 0), r1.xwxx
  bfi r1.xy, l(2, 2, 0, 0), l(10, 13, 0, 0), r3.xxxx, r1.xyxx
  bfi r1.w, l(1), l(4), r0.z, l(0)
  ubfe r3.x, l(3), l(6), r1.x
  and r3.y, r1.z, l(6)
  bfi r1.z, l(1), l(8), r1.z, l(0)
  imad r1.z, r3.x, l(32), r1.z
  imad r1.z, r3.y, l(4), r1.z
  bfi r1.xy, l(6, 6, 0, 0), l(0, 3, 0, 0), r1.wwww, r1.xyxx
  bfi r1.y, l(9), l(3), r1.z, r1.y
  bfi r1.x, l(6), l(0), r1.x, r1.y
else 
  ishr r5.xyzw, r0.xyzw, l(5, 5, 2, 3)
  iadd r0.x, r3.z, l(31)
  ushr r0.x, r0.x, l(5)
  imad r0.x, r5.y, r0.x, r5.x
  ishl r0.y, r0.z, l(7)
  and r1.yz, r0.yyyy, l(0, 1792, 2048, 0)
  bfi r0.y, l(3), l(5), r0.w, r1.y
  bfi r0.y, l(21), l(11), r0.x, r0.y
  bfi r0.z, l(1), l(4), r0.z, l(0)
  iadd r0.y, r0.y, r0.z
  ishl r1.yw, r1.yyyy, l(0, 3, 0, 2)
  bfi r1.yw, l(0, 3, 0, 3), l(0, 8, 0, 7), r0.wwww, r1.yyyw
  bfi r0.xw, l(21, 0, 0, 21), l(14, 0, 0, 13), r0.xxxx, r1.yyyw
  imad r0.xz, r0.zzzz, l(8, 0, 4, 0), r0.xxwx
  bfi r0.x, l(12), l(0), r1.z, r0.x
  and r0.z, r0.z, l(1792)
  iadd r0.x, r0.x, r0.z
  and r0.z, r5.z, l(2)
  iadd r0.z, r5.w, r0.z
  bfi r0.z, l(2), l(6), r0.z, l(0)
  iadd r0.x, r0.x, r0.z
  bfi r1.x, l(6), l(0), r0.y, r0.x
endif 
iadd r0.x, r1.x, CB0[0][1].x
ushr r0.x, r0.x, l(4)
ieq r0.y, r3.w, l(5)
if_nz r0.y
  mov r4.yw, r4.wwwy
  mov r4.xyzw, r4.yzwx
  mov r0.z, l(2)
else 
  mov r0.z, r3.w
endif 
ieq r0.w, r0.z, l(4)
if_nz r0.w
  mov r4.xyzw, r4.yxwz
  mov r0.z, l(2)
endif 
ieq r1.xyz, r0.zzzz, l(1, 2, 3, 0)
or r0.zw, r1.yyyz, r1.xxxy
if_nz r0.z
  ishl r1.xyzw, r4.xyzw, l(8, 8, 8, 8)
  and r1.xyzw, r1.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r5.xyzw, r4.xyzw, l(8, 8, 8, 8)
  and r5.xyzw, r5.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r4.xyzw, r1.xyzw, r5.xyzw
endif 
if_nz r0.w
  ushr r1.xyzw, r4.xyzw, l(16, 16, 16, 16)
  bfi r4.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r4.xyzw, r1.xyzw
endif 
store_uav_typed U0[0].xyzw, r0.xxxx, r4.xyzw
iadd r0.x, r0.x, l(2)
if_nz r0.y
  mov r2.yw, r2.wwwy
  mov r2.xyzw, r2.yzwx
  mov r3.w, l(2)
endif 
ieq r0.y, r3.w, l(4)
if_nz r0.y
  mov r2.xyzw, r2.yxwz
  mov r3.w, l(2)
endif 
ieq r0.yzw, r3.wwww, l(0, 1, 2, 3)
or r0.yz, r0.zzwz, r0.yyzy
if_nz r0.y
  ishl r1.xyzw, r2.xyzw, l(8, 8, 8, 8)
  and r1.xyzw, r1.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r3.xyzw, r2.xyzw, l(8, 8, 8, 8)
  and r3.xyzw, r3.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r2.xyzw, r1.xyzw, r3.xyzw
endif 
if_nz r0.z
  ushr r1.xyzw, r2.xyzw, l(16, 16, 16, 16)
  bfi r2.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r2.xyzw, r1.xyzw
endif 
store_uav_typed U0[0].xyzw, r0.xxxx, r2.xyzw
ret 
// Approximately 747 instruction slots used
